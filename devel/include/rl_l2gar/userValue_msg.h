// Generated by gencpp from file rl_l2gar/userValue_msg.msg
// DO NOT EDIT!


#ifndef RL_L2GAR_MESSAGE_USERVALUE_MSG_H
#define RL_L2GAR_MESSAGE_USERVALUE_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rl_l2gar
{
template <class ContainerAllocator>
struct userValue_msg_
{
  typedef userValue_msg_<ContainerAllocator> Type;

  userValue_msg_()
    : lx(0.0)
    , ly(0.0)
    , rx(0.0)
    , ry(0.0)
    , L2(0.0)  {
    }
  userValue_msg_(const ContainerAllocator& _alloc)
    : lx(0.0)
    , ly(0.0)
    , rx(0.0)
    , ry(0.0)
    , L2(0.0)  {
  (void)_alloc;
    }



   typedef double _lx_type;
  _lx_type lx;

   typedef double _ly_type;
  _ly_type ly;

   typedef double _rx_type;
  _rx_type rx;

   typedef double _ry_type;
  _ry_type ry;

   typedef double _L2_type;
  _L2_type L2;





  typedef boost::shared_ptr< ::rl_l2gar::userValue_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rl_l2gar::userValue_msg_<ContainerAllocator> const> ConstPtr;

}; // struct userValue_msg_

typedef ::rl_l2gar::userValue_msg_<std::allocator<void> > userValue_msg;

typedef boost::shared_ptr< ::rl_l2gar::userValue_msg > userValue_msgPtr;
typedef boost::shared_ptr< ::rl_l2gar::userValue_msg const> userValue_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rl_l2gar::userValue_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rl_l2gar::userValue_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rl_l2gar::userValue_msg_<ContainerAllocator1> & lhs, const ::rl_l2gar::userValue_msg_<ContainerAllocator2> & rhs)
{
  return lhs.lx == rhs.lx &&
    lhs.ly == rhs.ly &&
    lhs.rx == rhs.rx &&
    lhs.ry == rhs.ry &&
    lhs.L2 == rhs.L2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rl_l2gar::userValue_msg_<ContainerAllocator1> & lhs, const ::rl_l2gar::userValue_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rl_l2gar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rl_l2gar::userValue_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rl_l2gar::userValue_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rl_l2gar::userValue_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5f52d6674a24214f88c039b8afc2bfa";
  }

  static const char* value(const ::rl_l2gar::userValue_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5f52d6674a24214ULL;
  static const uint64_t static_value2 = 0xf88c039b8afc2bfaULL;
};

template<class ContainerAllocator>
struct DataType< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rl_l2gar/userValue_msg";
  }

  static const char* value(const ::rl_l2gar::userValue_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lx\n"
"float64 ly\n"
"float64 rx\n"
"float64 ry\n"
"float64 L2\n"
;
  }

  static const char* value(const ::rl_l2gar::userValue_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lx);
      stream.next(m.ly);
      stream.next(m.rx);
      stream.next(m.ry);
      stream.next(m.L2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct userValue_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rl_l2gar::userValue_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rl_l2gar::userValue_msg_<ContainerAllocator>& v)
  {
    s << indent << "lx: ";
    Printer<double>::stream(s, indent + "  ", v.lx);
    s << indent << "ly: ";
    Printer<double>::stream(s, indent + "  ", v.ly);
    s << indent << "rx: ";
    Printer<double>::stream(s, indent + "  ", v.rx);
    s << indent << "ry: ";
    Printer<double>::stream(s, indent + "  ", v.ry);
    s << indent << "L2: ";
    Printer<double>::stream(s, indent + "  ", v.L2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RL_L2GAR_MESSAGE_USERVALUE_MSG_H
